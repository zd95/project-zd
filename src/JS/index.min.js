/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
//该模块负责处理元素的移动
//将该模块导出
/* harmony default export */ __webpack_exports__["a"] = (function (index) {
  //获取头部导航元素
  var headNavs = document.querySelectorAll("#app .head .headMain .headNav .navItem");
  var content = document.querySelector("#app .content");
  var slideBox = content.querySelector("#app .content .slideBox");
  var icons = document.querySelectorAll("#app .content .iconBox .icon");

  var homeNav = headNavs[0];//获取头部第一个导航，页面打开时，默认让小箭头移动至该导航下
  //获取箭头指针
  var arrow = document.querySelector("#app .head .headMain .arrow");


  for (var j = 0; j < headNavs.length; j++) {
    headNavs[j].classList.remove("active");
    icons[j].classList.remove("iconActive");
  }
  // 删掉之后再给对应的元素添加类
  headNavs[index].classList.add("active");
  icons[index].classList.add("iconActive");
  //点击头部导航时，箭头指针指向该导航
  arrow.style.left = (headNavs[index].offsetLeft + headNavs[index].offsetWidth/2 - arrow.offsetWidth/2) + "px";
  //设置内容区ulde 位置
  slideBox.style.top = `-${index * content.offsetHeight}px`;
});


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
///

//获取每一屏需要添加的效果
const rightShow = "rightShow"
const rightHide = "rightHide"
const leftShow = "leftShow"
const leftHide = "leftHide"



var content = document.querySelector("#app .content ");//内容区

var homeLis = document.querySelectorAll("#app .content .slideBox > .homeSlideLi .homeSlide > .home-list .home-li")//获取home每一屏
var homeIcons = document.querySelectorAll("#app .content .slideBox > .homeSlideLi .homeSlide > .home-icons .home-icon");//home下的li
var oldIndex = 0;//标记上一次的索引
var homeIterval = 0;//清空定时器
var autoIndex = 0;//标记自动轮播时的索引




content.onmouseleave = function () {

  //当鼠标离开内容区，开启自动轮播
  autoPaly();

}
content.onmouseenter =function () {

  //当鼠标进入内容区，停止自动轮播
  clearInterval(homeIterval);
}

//删除添加
function clearClass (node) {

  node.classList.remove(rightShow)
  node.classList.remove(rightHide)
  node.classList.remove(leftShow)
  node.classList.remove(leftHide)
}
//自动轮播
function autoPaly(){
  //上来先清定时器
  clearInterval(homeIterval);
  homeIterval = setInterval(()=>{
    autoIndex++;
    if (autoIndex === homeLis.length){
      autoIndex = 0;//如果自动轮播至最后一屏，直接切换至第一屏
    }

   // 先将元素身上的类删除
    clearClass(homeLis[autoIndex]);
    clearClass(homeLis[oldIndex]);
    //在给目标元素添加类
    homeLis[autoIndex].classList.add(rightShow);//当前元素右显
    homeLis[oldIndex].classList.add(leftHide);//上一个元素左隐
    //小圆点实时显示
    iconFn(homeIcons,autoIndex);
    // //索引值变化之前先将其获取
        oldIndex = autoIndex;

  },2000)
}


//小圆点
function iconFn (icons,currentIndex) {
  icons.forEach((icon)=>{
    icon.classList.remove("iconActive")
  })
  icons[currentIndex].classList.add("iconActive")
}
//将该模块导出
/* harmony default export */ __webpack_exports__["a"] = (function () {
  //首先直接调一把自动轮播
  autoPaly();
  //点击小圆点来执行手动轮播
  homeIcons.forEach((item,index)=>{
    //将索引的值设置为item的属性，便于操作
    item.index = index;
    //当点击小圆点时，切换每一屏
    item.onclick = function () {

      //执行手动轮播时先关闭定时器
      clearInterval(homeIterval);
      //当事件元的索引与上一次点击的索引相同时，不执行切换，依旧停留在当前屏
      if (this.index === oldIndex){
        return ;//直接跳出当前函数体，不执行该函数的内部逻辑
      }


      //当事件元触发时，先将自身的类及上一屏的类清掉{同开启定时器后先将上次的定时清掉}
      clearClass(homeLis[this.index]);
      clearClass(homeLis[oldIndex])
      //如果点击的是右边
      if(this.index > oldIndex){
        // 当前屏从右边显示
        homeLis[this.index].classList.add(rightShow);
        //上一屏从左边隐藏
        homeLis[oldIndex].classList.add(leftHide);
      }

      //如果点击的是左边
      if(this.index < oldIndex){
        // 当前屏从右边显示
        homeLis[this.index].classList.add(leftShow);
        //上一屏从左边隐藏
        homeLis[oldIndex].classList.add(rightHide);
      }

      //设置小圆点高亮
      iconFn(homeIcons,this.index);

      //索引值变化之前先将其获取
      oldIndex = this.index;
      //将当前的索引值标记为自动轮播时开始的索引值
      autoIndex = this.index;
    }
  })
});


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__frame_frame__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__specialtyJS_mask__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__specialtyJS_tema__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__specialtyJS_about__ = __webpack_require__(9);
//使用Babel编译该文件
// import "@babel/polyfill"


// import homeFn from "./specialtyJS/home"

// import "./specialtyJS/course"
// import "./specialtyJS/works"

// import "./specialtyJS/about"
// import "./specialtyJS/tema"


//执行业务逻辑
window.onload = function(){
  Object(__WEBPACK_IMPORTED_MODULE_0__frame_frame__["a" /* default */])();
  // homeFn();
  Object(__WEBPACK_IMPORTED_MODULE_3__specialtyJS_about__["a" /* default */])();
  Object(__WEBPACK_IMPORTED_MODULE_2__specialtyJS_tema__["a" /* default */])();
  Object(__WEBPACK_IMPORTED_MODULE_1__specialtyJS_mask__["a" /* default */])()
}

//处理用户缩放
window.onresize = function () {
  //当用户缩放页面时，让浏览器根据缩放后的页面对JS中的设置的滑屏进行重绘
  //使页面始终只显示一屏
  var headNavs = document.querySelectorAll("#app .head .headMain .headNav .navItem");
  var content = document.querySelector("#app .content");
  var slideLi = content.querySelectorAll("#app .content .slideBox > .slideLi ");
  var arrow = document.querySelector("#app .head .headMain .arrow");
  var homeNav = headNavs[0];//获取头部第一个导航，页面打开时，默认让小箭头移动至该导航下

  slideLi.forEach((sli)=>{
    sli.style.height = content.offsetHeight + "px";
  })


  arrow.style.left = (homeNav.offsetLeft + homeNav.offsetWidth/2 - arrow.offsetWidth/2) + "px";


}


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__move_move__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__wheelFn_wheelFn__ = __webpack_require__(4);
//引入所依赖的模块



//当页面加载完成时
/* harmony default export */ __webpack_exports__["a"] = (function () {
  //获取头部导航元素
  var headNavs = document.querySelectorAll("#app .head .headMain .headNav .navItem");
  var content = document.querySelector("#app .content");
  var slideLis = content.querySelectorAll("#app .content .slideBox > .slideLi");
  var icons = document.querySelectorAll("#app .content .iconBox .icon");
  var homeNav = headNavs[0];//获取头部第一个导航，页面打开时，默认让小箭头移动至该导航下
  //获取箭头指针
  var arrow = document.querySelector("#app .head .headMain .arrow");

  //设置箭头指针的默认位置
  arrow.style.left = (homeNav.offsetLeft + homeNav.offsetWidth/2 - arrow.offsetWidth/2) + "px";

 if(headNavs.length === icons.length){
   // 设置头部导航（点击导航时，导航突出显示，其他导航消除突出）
   for (var i = 0; i < headNavs.length; i++) {
     //将i的值设置为目标元素的属性，可以跨模块操作
     headNavs[i].index = i;
     icons[i].index = i;
     headNavs[i].onclick = icons[i].onclick = function () {
       Object(__WEBPACK_IMPORTED_MODULE_0__move_move__["a" /* default */])(this.index);
     }

   }
 }
  //content区域    设置ul>li的高度
  slideLis.forEach((itme)=>{
    itme.style.height = content.offsetHeight + "px";
    console.log(content.offsetHeight)
  })

//鼠标滚轮事件
  var wheelTimer = 0;//将定时器的默认值设置为0
  content.index = 0;//将index设置为content的属性，便于跨模块使用
//如果用兼容火狐浏览器的方式监听滚轮事件
  if(content.addEventListener){
    content.addEventListener("DOMMouseScroll",(event)=>{
      //对滚轮的滚动方式设置防抖节流
      clearTimeout(wheelTimer)
      wheelTimer = setTimeout(()=>{
        //页面随滚轮而动
        Object(__WEBPACK_IMPORTED_MODULE_1__wheelFn_wheelFn__["a" /* default */])(event,content.index)
      },50)
    })
  }
//ie||chrome浏览器的方式监听滚轮事件

  content.onmousewheel = (event)=>{
    //对滚轮的滚动方式设置防抖节流
    clearTimeout(wheelTimer)
    wheelTimer = setTimeout(()=>{
      //页面随滚轮而动
      Object(__WEBPACK_IMPORTED_MODULE_1__wheelFn_wheelFn__["a" /* default */])(event,content.index)
    },50)
  }







  // 设置头部导航（点击导航时，导航突出显示，其他导航消除突出）
  // for (var i = 0; i < headNavs.length; i++) {
  //   (function (i) {//创建闭包
  //     headNavs[i].onclick = function () {
  //       //触发点击事件，一进来先将元素身上的类删掉
  //       for (var j = 0; j < headNavs.length; j++) {
  //         headNavs[j].classList.remove("active");
  //       }
  //       // 删掉之后再给对应的元素添加类
  //       headNavs[i].classList.add("active");
  //       //点击头部导航时，箭头指针指向该导航
  //       arrow.style.left = (headNavs[i].offsetLeft + headNavs[i].offsetWidth/2 - arrow.offsetWidth/2) + "px";
  //
  //     }
  //   })(i);
  // }
});


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__move_move__ = __webpack_require__(0);
//设置滚轮事件的回调函数

/* harmony default export */ __webpack_exports__["a"] = (function (ev,index) {
  ev = ev || event;//考虑兼容性；获取鼠标信息
  //获取需要滚动的区域{内容区}
  var content = document.querySelector("#app .content");
//获取小圆点
  var icons = document.querySelectorAll("#app .content .iconBox .icon");
//获取小圆点的个数，用于衡量滚动的位置
  var wheelLength = icons.length;
//声明一个变量来标记滚轮滚动的方向
  var dir = "";

//在ie或chrome浏览器中
  //如果存在滚轮事件，且滚动的增量>0
  if(ev.wheelDelta &&  ev.wheelDelta > 0){ //上滑：120
      dir = "up"
  }else if(ev.wheelDelta &&  ev.wheelDelta <0){ //如果存在滚轮事件，且滚动的增量<0
      dir = "down"                                          //下滑：-120
  }

  //如果是在火狐浏览器中
  if(ev.detail &&  ev.detail > 0){
    dir = "down"
  }else if(ev.detail &&  ev.detail < 0){
    dir ="up"
  }


  switch (dir){
    case "up"://当滚轮上滑时，index的变化范围
      index > 0 ? index-- : 0;
      Object(__WEBPACK_IMPORTED_MODULE_0__move_move__["a" /* default */])(index)
      break;
    case "down"://当滚轮下滑时，index的变化范围
      index < (wheelLength-1) ? index++ :(wheelLength-1) ;
      Object(__WEBPACK_IMPORTED_MODULE_0__move_move__["a" /* default */])(index)
      break;
  }
  content.index = index;
});


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__inOutAn_js__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__home__ = __webpack_require__(1);


/* harmony default export */ __webpack_exports__["a"] = (function () {
  var maskNode = document.querySelector(".fullpage > .mask")
  var upNode = document.querySelector(".fullpage > .mask .up")
  var downNode = document.querySelector(".fullpage > .mask .down")
  var lineNode = document.querySelector(".fullpage > .mask .line")


  //数据加载完  发ajax
  setTimeout(()=>{
    lineNode.style.width = "100%"
  },2000)

  lineNode.addEventListener("transitionend",()=>{
    upNode.style.height = "0px";
    downNode.style.height = "0px";
    lineNode.remove()
  })

  upNode.addEventListener("transitionend",()=>{
    maskNode.remove()
    __WEBPACK_IMPORTED_MODULE_0__inOutAn_js__["a" /* default */][0].inAn()
    Object(__WEBPACK_IMPORTED_MODULE_1__home__["a" /* default */])()
  })
});


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var homeList = document.querySelector("#app .home-list");
var homePoints = document.querySelector("#app .home-icons");
homeList.style.transition = "transform 1s , opacity 1s";
homePoints.style.transition = "transform 1s , opacity 1s";

var plane1 =document.querySelector("#app .course .plane1")
var plane2 =document.querySelector("#app .course .plane2")
var plane3 =document.querySelector("#app .course .plane3")

var pencel1 =document.querySelector("#app .works .pencel1")
var pencel2 =document.querySelector("#app .works .pencel2")
var pencel3 =document.querySelector("#app .works .pencel3")

var about3 =document.querySelector("#app .about-pic1")
var about4 =document.querySelector("#app .about-pic2")

var team1 =document.querySelector("#app .team-theme")
var team2 =document.querySelector("#app .team-text")



/* harmony default export */ __webpack_exports__["a"] = ([
  {
    inAn(){
      homeList.style.opacity = 1;
      homePoints.style.opacity = 1;
      homeList.style.transform="translateY(0px)";
      homePoints.style.transform="translateY(0px)";
    },
    outAn(){
      homeList.style.opacity = 0;
      homePoints.style.opacity = 0;
      homeList.style.transform="translateY(-250px)";
      homePoints.style.transform="translateY(250px)";
    },
  },
  {
    inAn(){
      plane1.style.transform = "translate(100px,100px)"
      plane2.style.transform = "translate(100px,-100px)"
      plane3.style.transform = "translate(-100px,100px)"
    },
    outAn(){
      plane1.style.transform = "translate(0px,0px)"
      plane2.style.transform = "translate(0px,0px)"
      plane3.style.transform = "translate(0px,0px)"
    },
  },
  {
    inAn(){
      pencel1.style.transform = "translateY(20px)"
      pencel2.style.transform = "translateY(-20px)"
      pencel3.style.transform = "translateY(-20px)"
    },
    outAn(){
      pencel1.style.transform = "translateY(0px)"
      pencel2.style.transform = "translateY(0px)"
      pencel3.style.transform = "translateY(0px)"
    },
  },
  {
    inAn(){
      about3.style.transform="rotate(0deg)"
      about4.style.transform="rotate(0deg)"
    },
    outAn(){
      about3.style.transform="rotate(45deg)"
      about4.style.transform="rotate(-45deg)"
    },
  },
  {
    inAn(){
      team1.style.transform="translateX(0px)"
      team2.style.transform="translateX(0px)"
    },
    outAn(){
      team1.style.transform="translateX(-100px)"
      team2.style.transform="translateX(100px)"
    },
  }
]);



/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bubble_bubble__ = __webpack_require__(8);
//引入该模块所依赖的模块

//将该模块导出
/* harmony default export */ __webpack_exports__["a"] = (function () {
  var bubbleObj = document.querySelector("#app .content .slideBox .slideLi .teamSlide > .team-person > .bubble");
  var teamLis = document.querySelectorAll("#app .content .slideBox .slideLi .teamSlide > .team-person > .team-ul > .team-li");
  var teamPerson = document.querySelector("#app .content .slideBox .slideLi .teamSlide > .team-person");
  //设置画布的宽度
  console.log(bubbleObj)
  console.log(teamLis)
  bubbleObj.width = teamLis[0].offsetWidth;

  bubbleObj.height = teamLis[0].offsetHeight;
  //当鼠标移入每个li时设置其对应的样式
  teamLis.forEach((teamLi)=>{
    teamLi.onmouseenter = function () {
      teamLis.forEach((teamLi)=>{
        teamLi.style.opacity = 0.5;
      })
      this.style.opacity = 1;

      //气泡在每个li上显示
      bubbleObj.style.display = "block";
      bubbleObj.style.left = this.offsetLeft +"px";
      bubbleObj.style.top= this.offsetTop + 20 +"px";
      //调用函数，生成气泡
      __WEBPACK_IMPORTED_MODULE_0__bubble_bubble__["a" /* default */].qipaofn(bubbleObj);
    }

  })
  //当鼠标移出teamPerson时，
  teamPerson.onmouseleave = function () {
    teamLis.forEach((teamLi)=>{
      teamLi.style.opacity=1;
    })

    bubbleObj.style.display="none";
    //console.log(bubbleObjFn.bubbleInterval.bubbleTimer1,bubbleObjFn.bubbleInterval.bubbleTimer2)
    // clearInterval(bubbleObjFn.bubbleInterval.bubbleTimer1)
    // clearInterval(bubbleObjFn.bubbleInterval.bubbleTimer2)
    clearInterval(__WEBPACK_IMPORTED_MODULE_0__bubble_bubble__["a" /* default */].intervalTimer.timer1);
    clearInterval(__WEBPACK_IMPORTED_MODULE_0__bubble_bubble__["a" /* default */].intervalTimer.timer2);

  }
});


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// //设置气泡
//
// //将定时器设置为对象的属性
// var bubbleInterval = {
//   //先将定时器清空
//   bubbleTimer1:0,
//   bubbleTimer2:0
// }
//
//
// //将该 模块内的数据包在一个对象内导出
// export default {
//   bubbleInterval,
//   //封装一个函数，设置气泡
//
//   bubbleFn:function (bubbleCtx) {
//     //上来先将两个定时器关掉
//     console.log("_____________");
//     clearInterval(bubbleInterval.bubbleTimer1);
//     clearInterval(bubbleInterval.bubbleTimer2);
//     //定义一个数组，用来存储绘制气泡的数据
//     var bubbleArr = [];
//     //获取绘制环境
//     var ctx = bubbleCtx.getContext("2d");
//
//
//     //使用定时器循环生成气泡绘制时所需要的数据
//     bubbleInterval.bubbleTimer1 = setInterval(()=>{
//       // 设置气泡的最大半径{且随机生成}
//       var radius = Math.round(Math.random()*6) + 4;
//       //设置气泡出现的坐标{在一定范围内随机出现}
//       // 设置气泡一开始的出现位置
//       //X轴随机，y轴限定范围
//       var x = Math.round(Math.random() * bubbleCtx.width);
//       var y = bubbleCtx.height - 2*radius;
//
//       //设置气泡的颜色
//       var r = Math.round(Math.random()*255);
//       var g = Math.round(Math.random()*255);
//       var b = Math.round(Math.random()*255);
//       var a = 1;
//
//
//
//       //设置气泡的运动轨迹
//       var deg = 0;
//       //获取气泡首次生成时的起始位置{生成气泡的圆心的坐标}
//       var startX = x;
//       var startY = y;
//
//       //设置每个气泡自身的运动幅度及轨迹{幅度最小不低于10}
//       var stepX = Math.round(Math.random()*50) + 10;
//       var stepY = Math.round(Math.random()*50)+10;
//
//       //将气泡的数据添加至数组中
//       bubbleArr.push({
//         radius,
//         x,
//         y,
//         r,
//         g,
//         b,
//         a,
//         deg,
//         startX,
//         startY,
//         stepX,
//         stepY
//       })
//
//     },50)
//
//     //绘制气泡
//     bubbleInterval.bubbleTimer2 = setInterval(()=>{
//       //清空画布
//       ctx.clearRect(0,0, bubbleCtx.width, bubbleCtx.height);
//       //遍历数组，获取绘制气泡的数据,并对其进行处理
//       bubbleArr.forEach((item,index)=>{
//         //设置气泡移动的角度
//         item.deg += 10;
//         //设置每个气泡生成时的坐标
//         item.x = item.startX - (Math.sin((item.deg*Math.PI)/180)*item.stepX)
//         item.Y = item.startY - ((item.deg*Math.PI)/180*item.stepY);
//
//         //当y小于半径时，将其清除
//         if(item.y < -2*item.radius){
//           bubbleArr.splice(index,1);
//         }
//       });
//
//       //绘制气泡
//       bubbleArr.forEach((item)=>{
//         ctx.save()
//         ctx.beginPath()
//         ctx.fillStyle = `rgba(${item.r},${item.g},${item.b},${item.a})`
//         ctx.arc(item.x,item.y,item.radius,0,2*Math.PI)
//         ctx.fill()
//         ctx.restore()
//       })
//     },1000/60)
//   }
//
// }
var intervalTimer = {
  timer1:0,
  timer2:0
}
/* harmony default export */ __webpack_exports__["a"] = ({
  intervalTimer,
  qipaofn:function (oc) {
    clearInterval(intervalTimer.timer1)
    clearInterval(intervalTimer.timer2)

    var arr =[];
    var ctx = oc.getContext("2d");
    intervalTimer.timer1 = setInterval(()=>{
      var radius = Math.round(Math.random()*6) + 4;
      var x =  Math.round(Math.random() * oc.width);
      var y =  oc.height - radius ;

      var r = Math.round(Math.random() * 255);
      var g = Math.round(Math.random() * 255);
      var b = Math.round(Math.random() * 255);
      var a = 1;

      var deg = 0;
      var startX = x;
      var startY = y;
      var stepX = Math.round(Math.random()*40) + 10
      var stepY = Math.round(Math.random()*40) + 10

      arr.push({
        x,
        y,
        radius,
        r,
        g,
        b,
        a,
        deg,
        startX,
        startY,
        stepX,
        stepY
      })
    },50)
    intervalTimer.timer2 = setInterval(()=>{
      ctx.clearRect(0, 0, oc.width, oc.height)

      arr.forEach((item,index)=>{
        item.deg += 10;
        item.x =  item.startX - (Math.sin( (item.deg*Math.PI)/180 )*item.stepX)
        item.y =  item.startY - ((item.deg*Math.PI)/180*item.stepY)

        if(item.y < -item.radius){
          arr.splice(index,1)
        }
      })


      arr.forEach((item)=>{
        ctx.save()
        ctx.beginPath()
        ctx.fillStyle = `rgba(${item.r},${item.g},${item.b},${item.a})`;
        ctx.arc(item.x,item.y,item.radius,0,2*Math.PI)
        ctx.fill()
        ctx.restore()
      })
    },1000/60)
  }
});


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
//封装一个函数创建ul下的子元素
function creationFn (ul) {
  //循环创建ul下的li
  for (var i = 0; i <4 ; i++) {
    //定义li的宽高
    var w = ul.offsetWidth/2;
    var h = ul.offsetHeight/2;
    //创建li元素
    var liNode = document.createElement("li");
    //创建li下的img元素
    var imgNode = document.createElement("img");
    //设置img的src属性
     imgNode.src= ul.dataset.src;


     liNode.style.width = `${w}px`;
     liNode.style.height = `${h}px`;

     //设置每个img元素的位置
    imgNode.style.left = `${-(i%2*w)}px`;
    imgNode.style.top = `${-(Math.floor(i/2)*h)}px`;

     // 将创建的img添加至li元素中
    liNode.appendChild(imgNode);
    //将创建的li元素添加至ul元素中
    ul.appendChild(liNode);

  }
}



//将该模块导出
/* harmony default export */ __webpack_exports__["a"] = (function () {
  //获取相关元素
  var aboutPics = document.querySelectorAll("#app .content .slideBox .slideLi > .aboutSlide > .about-pic");
  var aboutPicUl = document.querySelectorAll("#app .content .slideBox .slideLi > .aboutSlide > .about-pic > ul");
  //设置当鼠标移入时，每个li移动的距离
  var l = aboutPicUl[0].offsetWidth/2;
  var t = aboutPicUl[0].offsetHeight/2;



  //给每个ul添加li
  aboutPicUl.forEach((item)=>{
    creationFn(item);
  })

  //当鼠标移入每个aboutPic时，其内部li中的图片向中间聚拢，合成一张新的图片
  aboutPics.forEach((aboutPic)=>{
    //当鼠标移入时
    aboutPic.onmouseenter = function () {
      //获取该元素节点下的img元素
      var imgNodes = this.querySelectorAll("ul > li > img");
      //设置每个li的显示方式
      imgNodes.forEach((imgNode,index)=>{
        // switch (){case 0:  break}
      //  一种判断表达式：当switch中的表达式与case中的值相等时，需要执行的判断逻辑、
        //当执行完该逻辑之后，跳出当前判断，如果不满足继续往下匹配，
        //如果没有与表达式匹配的case,执行default中的逻辑
        switch (index) {
          case 0:
            //当鼠标移入时，下标为0的img的移动方式:从上至下移动
            //由于其本身的宽高和父元素相同，且其父元素已设置溢出隐藏，
            //当img的移动距离大于等于其父元素的宽高时，会被隐藏，
            //后面的图片会显示
            imgNode.style.top = `${t}px`;
            break;

          case 1:
            imgNode.style.left = `${-2*l}px`;
            break;

          case 2:
            imgNode.style.left = `${l}px`;
            break;

          case 3:
            imgNode.style.top = `${-2*t}px`;

        }
      })
    }

    //当鼠标移出时
    aboutPic.onmouseleave = function () {
      //获取该元素节点下的img元素
      var imgNodes = this.querySelectorAll("ul > li > img");
      //设置每个li的显示方式
      imgNodes.forEach((imgNode,index)=>{
        // switch (){case 0:  break}
        //  一种判断表达式：当switch中的表达式与case中的值相等时，需要执行的判断逻辑、
        //当执行完该逻辑之后，跳出当前判断，如果不满足继续往下匹配，
        //如果没有与表达式匹配的case,执行default中的逻辑
        switch (index) {
          case 0:
            //当鼠标移入时，下标为0的img的移动方式:从上至下移动
            //由于其本身的宽高和父元素相同，且其父元素已设置溢出隐藏，
            //当img的移动距离大于等于其父元素的宽高时，会被隐藏，
            //后面的图片会显示
            imgNode.style.top = `${0}px`;
            break;

          case 1:
            imgNode.style.left = `${-l}px`;
            break;

          case 2:
            imgNode.style.left = `${0}px`;
            break;

          case 3:
            imgNode.style.top = `${-t}px`;

        }
      })
    }

  })
});




/***/ })
/******/ ]);