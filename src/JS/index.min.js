/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
//该模块负责处理元素的移动
//将该模块导出
/* harmony default export */ __webpack_exports__["a"] = (function (index) {
  //获取头部导航元素
  var headNavs = document.querySelectorAll("#app .head .headMain .headNav .navItem");
  var content = document.querySelector("#app .content");
  var slideBox = content.querySelector("#app .content .slideBox");
  var icons = document.querySelectorAll("#app .content .iconBox .icon");

  var homeNav = headNavs[0];//获取头部第一个导航，页面打开时，默认让小箭头移动至该导航下
  //获取箭头指针
  var arrow = document.querySelector("#app .head .headMain .arrow");


  for (var j = 0; j < headNavs.length; j++) {
    headNavs[j].classList.remove("active");
    icons[j].classList.remove("iconActive");
  }
  // 删掉之后再给对应的元素添加类
  headNavs[index].classList.add("active");
  icons[index].classList.add("iconActive");
  //点击头部导航时，箭头指针指向该导航
  arrow.style.left = (headNavs[index].offsetLeft + headNavs[index].offsetWidth/2 - arrow.offsetWidth/2) + "px";
  //设置内容区ulde 位置
  slideBox.style.top = `-${index * content.offsetHeight}px`;
});


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__frame_frame__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__specialtyJS_home__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__specialtyJS_about__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__specialtyJS_about___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__specialtyJS_about__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__specialtyJS_tema__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__specialtyJS_tema___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__specialtyJS_tema__);
//使用Babel编译该文件
// import "@babel/polyfill"


// import "./specialtyJS/course"
// import "./specialtyJS/works"




//执行业务逻辑
window.onload = function(){
  Object(__WEBPACK_IMPORTED_MODULE_0__frame_frame__["a" /* default */])();
  Object(__WEBPACK_IMPORTED_MODULE_1__specialtyJS_home__["a" /* default */])();
}

//处理用户缩放
window.onresize = function () {
  //当用户缩放页面时，让浏览器根据缩放后的页面对JS中的设置的滑屏进行重绘
  //使页面始终只显示一屏
  var headNavs = document.querySelectorAll("#app .head .headMain .headNav .navItem");
  var content = document.querySelector("#app .content");
  var slideLi = content.querySelectorAll("#app .content .slideBox > .slideLi ");
  var arrow = document.querySelector("#app .head .headMain .arrow");
  var homeNav = headNavs[0];//获取头部第一个导航，页面打开时，默认让小箭头移动至该导航下

  slideLi.forEach((sli)=>{
    sli.style.height = content.offsetHeight + "px";
  })


  arrow.style.left = (homeNav.offsetLeft + homeNav.offsetWidth/2 - arrow.offsetWidth/2) + "px";


}


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__move_move__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__wheelFn_wheelFn__ = __webpack_require__(3);
//引入所依赖的模块



//当页面加载完成时
/* harmony default export */ __webpack_exports__["a"] = (function () {
  //获取头部导航元素
  var headNavs = document.querySelectorAll("#app .head .headMain .headNav .navItem");
  var content = document.querySelector("#app .content");
  var slideLis = content.querySelectorAll("#app .content .slideBox > .slideLi");
  var icons = document.querySelectorAll("#app .content .iconBox .icon");
  var homeNav = headNavs[0];//获取头部第一个导航，页面打开时，默认让小箭头移动至该导航下
  //获取箭头指针
  var arrow = document.querySelector("#app .head .headMain .arrow");

  //设置箭头指针的默认位置
  arrow.style.left = (homeNav.offsetLeft + homeNav.offsetWidth/2 - arrow.offsetWidth/2) + "px";

 if(headNavs.length === icons.length){
   // 设置头部导航（点击导航时，导航突出显示，其他导航消除突出）
   for (var i = 0; i < headNavs.length; i++) {
     //将i的值设置为目标元素的属性，可以跨模块操作
     headNavs[i].index = i;
     icons[i].index = i;
     headNavs[i].onclick = icons[i].onclick = function () {
       Object(__WEBPACK_IMPORTED_MODULE_0__move_move__["a" /* default */])(this.index);
     }

   }
 }
  //content区域    设置ul>li的高度
  slideLis.forEach((itme)=>{
    itme.style.height = content.offsetHeight + "px";
    console.log(content.offsetHeight)
  })

//鼠标滚轮事件
  var wheelTimer = 0;//将定时器的默认值设置为0
  content.index = 0;//将index设置为content的属性，便于跨模块使用
//如果用兼容火狐浏览器的方式监听滚轮事件
  if(content.addEventListener){
    content.addEventListener("DOMMouseScroll",(event)=>{
      //对滚轮的滚动方式设置防抖节流
      clearTimeout(wheelTimer)
      wheelTimer = setTimeout(()=>{
        //页面随滚轮而动
        Object(__WEBPACK_IMPORTED_MODULE_1__wheelFn_wheelFn__["a" /* default */])(event,content.index)
      },50)
    })
  }
//ie||chrome浏览器的方式监听滚轮事件

  content.onmousewheel = (event)=>{
    //对滚轮的滚动方式设置防抖节流
    clearTimeout(wheelTimer)
    wheelTimer = setTimeout(()=>{
      //页面随滚轮而动
      Object(__WEBPACK_IMPORTED_MODULE_1__wheelFn_wheelFn__["a" /* default */])(event,content.index)
    },50)
  }







  // 设置头部导航（点击导航时，导航突出显示，其他导航消除突出）
  // for (var i = 0; i < headNavs.length; i++) {
  //   (function (i) {//创建闭包
  //     headNavs[i].onclick = function () {
  //       //触发点击事件，一进来先将元素身上的类删掉
  //       for (var j = 0; j < headNavs.length; j++) {
  //         headNavs[j].classList.remove("active");
  //       }
  //       // 删掉之后再给对应的元素添加类
  //       headNavs[i].classList.add("active");
  //       //点击头部导航时，箭头指针指向该导航
  //       arrow.style.left = (headNavs[i].offsetLeft + headNavs[i].offsetWidth/2 - arrow.offsetWidth/2) + "px";
  //
  //     }
  //   })(i);
  // }
});


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__move_move__ = __webpack_require__(0);
//设置滚轮事件的回调函数

/* harmony default export */ __webpack_exports__["a"] = (function (ev,index) {
  ev = ev || event;//考虑兼容性；获取鼠标信息
  //获取需要滚动的区域{内容区}
  var content = document.querySelector("#app .content");
//获取小圆点
  var icons = document.querySelectorAll("#app .content .iconBox .icon");
//获取小圆点的个数，用于衡量滚动的位置
  var wheelLength = icons.length;
//声明一个变量来标记滚轮滚动的方向
  var dir = "";

//在ie或chrome浏览器中
  //如果存在滚轮事件，且滚动的增量>0
  if(ev.wheelDelta &&  ev.wheelDelta > 0){ //上滑：120
      dir = "up"
  }else if(ev.wheelDelta &&  ev.wheelDelta <0){ //如果存在滚轮事件，且滚动的增量<0
      dir = "down"                                          //下滑：-120
  }

  //如果是在火狐浏览器中
  if(ev.detail &&  ev.detail > 0){
    dir = "down"
  }else if(ev.detail &&  ev.detail < 0){
    dir ="up"
  }


  switch (dir){
    case "up"://当滚轮上滑时，index的变化范围
      index > 0 ? index-- : 0;
      Object(__WEBPACK_IMPORTED_MODULE_0__move_move__["a" /* default */])(index)
      break;
    case "down"://当滚轮下滑时，index的变化范围
      index < (wheelLength-1) ? index++ :(wheelLength-1) ;
      Object(__WEBPACK_IMPORTED_MODULE_0__move_move__["a" /* default */])(index)
      break;
  }
  content.index = index;
});


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
///

//获取每一屏需要添加的效果
const rightShow = "rightShow"
const rightHide = "rightHide"
const leftShow = "leftShow"
const leftHide = "leftHide"



var content = document.querySelector("#app .content ");//内容区

var homeLis = document.querySelectorAll("#app .content .slideBox > .homeSlideLi .homeSlide > .home-list .home-li")//获取home每一屏
var homeIcons = document.querySelectorAll("#app .content .slideBox > .homeSlideLi .homeSlide > .home-icons .home-icon");//home下的li
var oldIndex = 0;//标记上一次的索引
var homeIterval = 0;//清空定时器
var autoIndex = 0;//标记自动轮播时的索引




content.onmouseleave = function () {

  //当鼠标离开内容区，开启自动轮播
  autoPaly();

}
content.onmouseenter =function () {

  //当鼠标进入内容区，停止自动轮播
  clearInterval(homeIterval);
}

//删除添加
function clearClass (node) {

  node.classList.remove(rightShow)
  node.classList.remove(rightHide)
  node.classList.remove(leftShow)
  node.classList.remove(leftHide)
}
//自动轮播
function autoPaly(){
  //上来先清定时器
  clearInterval(homeIterval);
  homeIterval = setInterval(()=>{
    autoIndex++;
    if (autoIndex === homeLis.length){
      autoIndex = 0;//如果自动轮播至最后一屏，直接切换至第一屏
    }

   // 先将元素身上的类删除
    clearClass(homeLis[autoIndex]);
    clearClass(homeLis[oldIndex]);
    //在给目标元素添加类
    homeLis[autoIndex].classList.add(rightShow);//当前元素右显
    homeLis[oldIndex].classList.add(leftHide);//上一个元素左隐
    //小圆点实时显示
    iconFn(homeIcons,autoIndex);
    // //索引值变化之前先将其获取
        oldIndex = autoIndex;

  },2000)
}


//小圆点
function iconFn (icons,currentIndex) {
  icons.forEach((icon)=>{
    icon.classList.remove("iconActive")
  })
  icons[currentIndex].classList.add("iconActive")
}
//将该模块导出
/* harmony default export */ __webpack_exports__["a"] = (function () {
  //首先直接调一把自动轮播
  autoPaly();
  //点击小圆点来执行手动轮播
  homeIcons.forEach((item,index)=>{
    //将索引的值设置为item的属性，便于操作
    item.index = index;
    //当点击小圆点时，切换每一屏
    item.onclick = function () {

      //执行手动轮播时先关闭定时器
      clearInterval(homeIterval);
      //当事件元的索引与上一次点击的索引相同时，不执行切换，依旧停留在当前屏
      if (this.index === oldIndex){
        return ;//直接跳出当前函数体，不执行该函数的内部逻辑
      }


      //当事件元触发时，先将自身的类及上一屏的类清掉{同开启定时器后先将上次的定时清掉}
      clearClass(homeLis[this.index]);
      clearClass(homeLis[oldIndex])
      //如果点击的是右边
      if(this.index > oldIndex){
        // 当前屏从右边显示
        homeLis[this.index].classList.add(rightShow);
        //上一屏从左边隐藏
        homeLis[oldIndex].classList.add(leftHide);
      }

      //如果点击的是左边
      if(this.index < oldIndex){
        // 当前屏从右边显示
        homeLis[this.index].classList.add(leftShow);
        //上一屏从左边隐藏
        homeLis[oldIndex].classList.add(rightHide);
      }

      //设置小圆点高亮
      iconFn(homeIcons,this.index);

      //索引值变化之前先将其获取
      oldIndex = this.index;
      //将当前的索引值标记为自动轮播时开始的索引值
      autoIndex = this.index;
    }
  })
});


/***/ }),
/* 5 */
/***/ (function(module, exports) {



/***/ }),
/* 6 */
/***/ (function(module, exports) {



/***/ })
/******/ ]);